#+TITLE: RESTY

 Programmable interface to interact with REST endpoints

* WHY

** Emacs is better editor than postman
- Apart from familiarity of editor, we can do structural editing. ex:
  converting to plist and using ~paredit~

- since the response will be available in the Emacs buffer already, we
  can create seamless integration with the working project. ex:
  converting json to Elixir map is trivial

** piping requests to create a flow
ex: sign-in --> make_requests --> sign-out

** programmable the request
We can generate the request dynamically. ie. we don't have to fight
with the interface to generate random name, email, etc as payload values

** better visibility or filtering
We can use ~jq~ to filter systematically

** can use VCS
Since the requests are just elisp files we can use git to manage the changes

** tests suits
Advantage of having programmable interface is that you get all of the
facility of the programming language at your disposal


* TASKS

** REVIEW config management
changes to the configuration should be applied immediately as soon as buffer is saved

*** DONE configurations should be ordered
- global
- environment
- function

** DONE support request parameters

** DONE migrate to use emacs-request library

** DONE show request failure properly

** DONE should use request.el as backend?
*** in-built library feels faster

** DONE way to get the response as alist

** DONE allow overriding timeout
set appropriate default timeout

** DONE show processing of requests

** REVIEW fix handling concurrent requests
currently its handled by a shared variable

*** based on the DAG and endpoint (?)
allow if endpoints are different

*** based on the ~:output~ (?)

current approach is based on the ~id~ aka output buffer name

** DONE allow multiple UI outputs
Example use case, tableau signin -> get-view/workbook id -> get data -> signout

** DONE show correct time taken for the request
currently we sample time at the ~complete~ which is wrong as complete
callback is called after success/failure

** DONE display request method in the display

** DONE format request headers

** DONE show status as header with coloring
success : green
failure : red

** DONE show header as popup on a key-press

** DONE fix pipelines loosing base URL
currently consequent pipelines fail to get the baseurl when the buffer
switch happens before that request starts

** DONE create resty as a mode
we can create a derived mod from emacs-lisp

** TODO should be able to load environment from file automatically
** TODO import cURL request

** TODO allow pipe-lining requests
similar ~|>~ operator in Elixir

** TODO show environment in modeline

** TODO editing json should be painless
*** TODO can paste json text from outside Emacs and create a request

*** TODO can copy request as a json text

** TODO allow copying request as cURL

** WAIT allow to cancel pending request

** WAIT support different response
